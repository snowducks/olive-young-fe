pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "your-docker-repo/your-app-name" // 도커 이미지 이름
        DOCKER_TAG = "${env.BUILD_NUMBER}" // 빌드 번호를 태그로 사용
        AWS_REGION = "your-aws-region" // AWS 리전
        EKS_CLUSTER = "your-eks-cluster-name" // EKS 클러스터 이름
    }

    stages {
        // CI 단계: 빌드 및 테스트
        stage('Build and Test') {
            steps {
                script {
                    echo "Building and testing the application..."

                    // 의존성 설치
                    sh 'npm install'

                    // 애플리케이션 빌드
                    sh 'NODE_OPTIONS="--max-old-space-size=4096" npm run build'

                    // 테스트 실행 (테스트 스크립트가 package.json에 정의되어 있다고 가정)
                    sh 'npm test'
                }
            }
        }

        // Docker 이미지 빌드
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."

                    // Docker 이미지 빌드
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        // Docker 이미지를 ECR(또는 다른 레지스트리)에 푸시
        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image to ECR..."

                    // AWS CLI를 사용하여 ECR에 로그인
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_IMAGE}"

                    // Docker 이미지 푸시
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        // EKS에 배포 (ArgoCD를 통해 배포한다고 가정)
        stage('Deploy to EKS') {
            steps {
                script {
                    echo "Deploying to EKS using ArgoCD..."

                    // ArgoCD를 통해 배포 (예: kubectl 또는 ArgoCD CLI 사용)
                    sh "kubectl set image deployment/your-deployment-name your-container-name=${DOCKER_IMAGE}:${DOCKER_TAG} --namespace=your-namespace"
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline succeeded! Application is deployed to EKS."
        }
        failure {
            echo "Pipeline failed. Check the logs for more details."
        }
    }
}